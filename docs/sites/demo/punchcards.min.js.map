{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Base.ts","src/DateCircle.ts","src/DateRect.ts","src/WeekdayCircle.ts","src/WeekdayRect.ts","src/colormap.ts","src/legend.ts","src/punchcards.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","punchcards","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","d3","colormap_1","legend_1","Base","cf","domElemId","datekey","_this","domElem","document","getElementById","dim","canDraw","marginLeft","marginRight","marginTop","marginBottom","legendWidth","ylabel","title","colormap","ColorMap","classList","add","addEventListener","onResize","prototype","draw","drawBox","w","clientWidth","h","clientHeight","dx","dy","svg","append","attr","drawChartBody","drawFooter","text","style","drawHorizontalAxisLabel","xlabel","drawLegend","legend","Legend","drawSvg","select","drawTitle","drawVerticalAxis","todScale","scale","linear","range","domain","todAxis","axis","orient","tickValues","innerTickSize","outerTickSize","drawVerticalAxisLabel","update","div","firstChild","removeChild","onMouseOver","d","console","log","onClick","updateMinHeight","top","bottom","undefined","minHeight","toString","updateMinWidth","left","right","minWidth","Object","defineProperty","_marginLeft","_marginRight","_marginTop","_marginBottom","_legendWidth","minimumWidth","Math","max","_title","_xlabel","_ylabel","moment","DateRect_1","DateCircle","_super","__extends","remove","defineDimensions","drawSymbols","symbolMargin","wDays","dateTo","diff","dateFrom","symbolWidth","symbolHeight","min","group","dateAndHourOfDay","all","forEach","key","JSON","parse","data","lowest","Number","POSITIVE_INFINITY","highest","NEGATIVE_INFINITY","_i","data_1","elem","value","cLimLow","cLimHigh","selectAll","enter","dateScale","Date","parseInt","hourOfDay","numer","denom","getColorRGB","on","onMouseOut","DateRect","Base_1","dimension","m","hasOwnProperty","obj","format","hour","stringify","contains","drawHorizontalAxis","str","firstResultDate","getFullYear","getMonth","getDate","lastResultDate","tickFormat","ticks","nHoursDiff","time","days","dateAxis","WeekdayRect_1","WeekdayCircle","weekdayAndHourOfDay","dayOfWeekScale","weekday","WeekdayRect","ndays","_a","push","ordinal","xAxis","colortable","ct","expandColorTableStr","sort","compare","nColors","at","getColor","atUnity","prev","next","iColor","cond1","cond2","atRelative","theColor","floor","color","theColor_1","channel","addColor","addColors","colors","colors_1","defaultColorTable","b","sibling","width","height","drawLegendBody","nRects","iRect","verticalScale","verticalAxis","DateCircle_1","WeekdayCircle_1"],"mappings":"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","file":"dist/punchcards.min.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as CrossFilter from 'crossfilter';\nimport * as d3 from 'd3';\n\nimport {ColorMap} from './colormap';\nimport {Legend} from './legend';\n\n/**\n * This is the base class for all punchcards. It provides the methods that are\n * shared between all punchcards, such as drawing of the vertical axis (which is\n * always hour of day), drawing of the background box, generation of the SVG DOM\n * element, and so on.\n */\nexport class Base {\n\n    /**\n     * The crossfilter that contains the data which needs to be visualized.\n     * @type {CrossFilter.CrossFilter<any>}\n     */\n    public colormap: ColorMap;\n    /**\n     * The user-defined dimensions that are used to manipulate the crossfilter\n     * data.\n     * @type {any}\n     */\n    public domElem: HTMLElement;\n    /**\n     * The element ID of the this._domElem object.\n     * @type {string}\n     */\n    public svg: any;\n    /**\n     * Whether or not there is enough data defined to be able to draw anything.\n     * @type {boolean}\n     */\n    public canDraw: boolean;\n    protected cf: CrossFilter.CrossFilter<any>;\n    /**\n     * The colormap: i.e. the element that determines what color is used to\n     * display a certain value.\n     * @type {ColorMap}\n     */\n    protected dim: any;\n    /**\n     * The element of the DOM where the punchcard should be visualized.\n     * @type {HTMLElement}\n     */\n    protected domElemId: string;\n    /**\n     * The SVG DOM element that is used to draw a punchcard in.\n     * @type {any}\n     */\n    /**\n     * Text to use as title for the graph\n     * @type {string}\n     */\n    protected _title: string;\n    /**\n     * Text to use as label for the horizontal axis\n     * @type {string}\n     */\n    protected _xlabel: string;\n    /**\n     * Text to use as label for the vertical axis\n     * @type {string}\n     */\n    protected _ylabel: string;\n    /**\n     * d3 time scale for the vertical axis\n     * @type {d3.scale.Linear<any, any>}\n     */\n    protected todScale: d3.scale.Linear<any, any>;\n    /**\n     * height of the axis\n     * @type {number}\n     */\n    protected height: number;\n    /**\n     * Defines which key of your input data contains the datetime information\n     * based on which you want to create the symbols in the punchcard's body.\n     * The default value is 'datestr'\n     * @type {string}\n     */\n    protected datekey: string;\n    /**\n     * The space in pixels between the left side of the axis background and\n     * edge of the SVG element.\n     * @type {number}\n     */\n    private _marginLeft: number;\n    /**\n     * The space in pixels between the right side of the  axis background and\n     * edge of the SVG element.\n     * @type {number}\n     */\n    private _marginRight: number;\n    /**\n     * The space in pixels between the top side of axis background and edge of\n     * the SVG element.\n     * @type {number}\n     */\n    private _marginTop: number;\n    /**\n     * The space in pixels between the bottom side of axis background and edge\n     * of the SVG element.\n     * @type {number}\n     */\n    private _marginBottom: number;\n    /**\n     * width in pixels that is occupied by the legend\n     * @type {number}\n     */\n    private _legendWidth: number;\n\n    /**\n     * Constructs an instance of Base when given a crossfilter object and the\n     * name of a DOM element to draw in.\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\n     * containing the data\n     * @param  {string} domElemId DOM element identifier for the div in which to\n     * draw the punchcard graph\n     * @return {[type]} Returns an instance of Base class\n     */\n    constructor(cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\n\n        // the crossfilter object\n        this.cf = cf;\n\n        // the name of the DOM element\n        this.domElemId = domElemId;\n\n        // the DOM element by ID\n        this.domElem = document.getElementById(this.domElemId);\n\n        // all the dimensions are collected into one object, dim, which is\n        // initialized here:\n        this.dim = {};\n\n        // can only draw stuff after user has defined some dimensions\n        this.canDraw = false;\n\n        // the margins around the graph body\n        this.marginLeft = 70;\n        this.marginRight = 30;\n        this.marginTop = 50;\n        this.marginBottom = 110;\n        this.legendWidth = 80;\n\n        this.ylabel = 'Time of day';\n        this.title = '';\n\n        this.datekey = datekey || 'datestr';\n        this.colormap = new ColorMap();\n\n        this.domElem.classList.add('punchcard-common');\n\n        window.addEventListener('resize', () => {\n            this.onResize();\n        });\n\n    }\n\n    /**\n     * Placeholder method that does not do anything but needs to be here because\n     * it's called by .update().\n     * @return {Base} return the (unchanged) instance of Base\n     */\n    protected draw(): Base {\n        // placeholder method to be overridden in classes that inherit from this class\n        return this;\n    }\n    /**\n     * Adds an SVG g element containing an SVG rect element with which to draw a\n     * border around the punchcard graph.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawBox(): Base {\n        //\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft;\n        const dy: number = this.marginTop;\n\n        this.svg.append('g')\n            .attr('class', 'chartbody-box')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', w)\n                .attr('height', h)\n                .attr('class', 'chartbody-box');\n\n        return this;\n    }\n\n    /**\n     * Appends an SVG g element containing an SVG rect, the size of which is\n     * determined by the size of the SVG element minus the margins on 4 sides,\n     * and minus the width taken up by the legend. The rect constitutes the\n     * background of the punchcard's axes.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawChartBody(): Base {\n        //\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft;\n        const dy: number = this.marginTop;\n\n        this.svg.append('g')\n            .attr('class', 'chartbody')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', w)\n                .attr('height', h)\n                .attr('class', 'chartbody');\n\n        return this;\n    }\n\n    protected drawFooter(): Base {\n\n        const dx: number = this.domElem.clientWidth - this.marginRight - this.legendWidth;\n        const dy: number = this.domElem.clientHeight - this.marginBottom;\n        this.svg.append('g')\n            .attr('class', 'footer')\n            .append('text')\n            .text('')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .style('text-anchor', 'end')\n            .attr('x', '-5px')\n            .attr('y', '-5px');\n        return this;\n    }\n\n    /**\n     * Adds an SVG g element containing an SVG text element with which to label\n     * the horizontal axis.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawHorizontalAxisLabel(): Base {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft + 0.5 * w;\n        const dy: number = this.marginTop + h + 0.8 * this.marginBottom;\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.xlabel)\n            .attr('class', 'horizontal-axis-label');\n\n        return this;\n    }\n\n    /**\n     * Adds a Legend to the plot, while resizing the punchcard as necessary.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawLegend(): Base {\n        // draw the legend\n\n        const legend: Legend = new Legend(this);\n        legend.draw();\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG element to the DOM, so that other methods you can do d3\n     * things with it later.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawSvg(): Base {\n\n        this.svg = d3.select(this.domElem).append('svg')\n            .attr('width', this.domElem.clientWidth)\n            .attr('height', this.domElem.clientHeight);\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG g element containing an SVG text element representing the\n     * title of the punchcard graph.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawTitle(): Base {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const dx: number = this.marginLeft + 0.5 * w;\n        const dy: number = 0.5 * this.marginTop;\n\n        this.svg.append('g')\n            .attr('class', 'title')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.title)\n            .attr('class', 'title');\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG g element containing a d3.linear.axis representing the hour\n     * of day.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawVerticalAxis(): Base {\n        //\n        const dx: number = this.marginLeft;\n        const dy: number = this.domElem.clientHeight - this.marginBottom;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n\n        this.todScale = d3.scale.linear()\n            .range([-h, 0])\n            .domain([0.0, 24.0]);\n\n        const todAxis = d3.svg.axis()\n            .orient('left')\n            .scale(this.todScale)\n            .tickValues([0, 3, 6, 9, 12, 15, 18, 21, 24])\n            .innerTickSize(5)\n            .outerTickSize(0);\n\n        this.svg.append('g')\n            .attr('class', 'vertical-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(todAxis);\n\n        return this;\n\n    }\n\n    /**\n     * Adds an SVG g element containing an SVG text element with which to label\n     * the vertical axis.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    protected drawVerticalAxisLabel(): Base {\n        //\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = 0.3 * this.marginLeft;\n        const dy: number = this.marginTop + 0.5 * h;\n\n        this.svg.append('g')\n            .attr('class', 'vertical-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ') rotate(-90)')\n            .append('text')\n            .text(this.ylabel)\n            .attr('class', 'vertical-axis-label');\n\n        return this;\n\n    }\n\n    protected update() {\n\n        if (this.canDraw) {\n            // get the div element that we want to redraw\n            const div = this.domElem;\n\n            // delete the contents of the div\n            while (div.firstChild) {\n                div.removeChild(div.firstChild);\n            }\n            this.draw();\n        }\n    }\n\n    /**\n     * When the window is resized, redraw the punchcard graph in its entirety.\n     * @return {[type]} [description]\n     */\n    protected onResize() {\n        this.update();\n    }\n\n    protected onMouseOver(d: any) {\n        console.log(d);\n    }\n\n    protected onClick(d: any) {\n        console.log(d);\n    }\n\n    /**\n     * Sets the CSS style min-height such that the body of the punchcard graph\n     * cannot become smaller than 100px in height, while taking into account the\n     * margins on the top and bottom of the graph.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    private updateMinHeight(): Base {\n\n        let top: number = this.marginTop;\n        let bottom: number = this.marginBottom;\n\n        if (top === undefined || top < 0) {\n            top = 0;\n        }\n\n        if (bottom === undefined || bottom < 0) {\n            bottom = 0;\n        }\n\n        this.domElem.style.minHeight = (top + bottom + 100).toString() + 'px';\n\n        return this;\n    }\n\n    /**\n     * Sets the CSS style min-width such that the body of the punchcard graph\n     * cannot become narrower than 100px, while taking into account the\n     * margins on the left and right of the graph.\n     * @return {Base} returns a reference to the instance of Base\n     */\n    private updateMinWidth(): Base {\n\n        let left: number = this.marginLeft;\n        let right: number = this.marginRight;\n\n        if (left === undefined || left < 0) {\n            left = 0;\n        }\n\n        if (right === undefined || right < 0) {\n            right = 0;\n        }\n\n        this.domElem.style.minWidth = (left + right + 100).toString() + 'px';\n\n        return this;\n    }\n\n    /**\n     * [marginLeft description]\n     * @param  {number} marginLeft [description]\n     * @return {[type]}            [description]\n     */\n    public set marginLeft(marginLeft: number) {\n        this._marginLeft = marginLeft;\n        this.updateMinWidth();\n        this.update();\n    }\n\n    /**\n     * [marginLeft description]\n     * @return {number} [description]\n     */\n    public get marginLeft(): number {\n        return this._marginLeft;\n    }\n\n    /**\n     * [marginRight description]\n     * @param  {number} marginRight [description]\n     * @return {[type]}             [description]\n     */\n    public set marginRight(marginRight: number) {\n        this._marginRight = marginRight;\n        this.updateMinWidth();\n        this.update();\n    }\n\n    /**\n     * [marginRight description]\n     * @return {number} [description]\n     */\n    public get marginRight(): number {\n        return this._marginRight;\n    }\n\n    /**\n     * [marginTop description]\n     * @param  {number} marginTop [description]\n     * @return {[type]}           [description]\n     */\n    public set marginTop(marginTop: number) {\n        this._marginTop = marginTop;\n        this.updateMinHeight();\n        this.update();\n    }\n\n    /**\n     * [marginTop description]\n     * @return {number} [description]\n     */\n    public get marginTop(): number {\n        return this._marginTop;\n    }\n\n    /**\n     * [marginBottom description]\n     * @param  {number} marginBottom [description]\n     * @return {[type]}              [description]\n     */\n    public set marginBottom(marginBottom: number) {\n        this._marginBottom = marginBottom;\n        this.updateMinHeight();\n        this.update();\n    }\n\n    /**\n     * [marginBottom description]\n     * @return {number} [description]\n     */\n    public get marginBottom(): number {\n        return this._marginBottom;\n    }\n\n    /**\n     * [legendWidth description]\n     * @param  {number} legendWidth [description]\n     * @return {[type]}             [description]\n     */\n    public set legendWidth(legendWidth: number) {\n        const minimumWidth: number = 50;\n        this._legendWidth = Math.max(legendWidth, minimumWidth);\n        this.update();\n    }\n\n    /**\n     * [legendWidth description]\n     * @return {number} [description]\n     */\n    public get legendWidth(): number {\n        return this._legendWidth;\n    }\n\n    public set title(title: string) {\n        this._title = title;\n        this.update();\n    }\n\n    public get title(): string {\n        return this._title;\n    }\n\n    public set xlabel(xlabel: string) {\n        this._xlabel = xlabel;\n        this.update();\n    }\n\n    public get xlabel(): string {\n        return this._xlabel;\n    }\n\n    public set ylabel(ylabel: string) {\n        this._ylabel = ylabel;\n        this.update();\n    }\n\n    public get ylabel(): string {\n        return this._ylabel;\n    }\n\n}\n","import * as CrossFilter from 'crossfilter';\nimport * as moment from 'moment';\n\nimport {ColorMap} from './colormap';\nimport {DateRect} from './DateRect';\n\n/**\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\n */\nexport class DateCircle extends DateRect {\n\n    constructor(cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\n\n        super(cf, domElemId, datekey);\n        // ...but reset these properties\n        this.domElem.classList.remove('punchcard-date-rect');\n        this.canDraw = false;\n\n        this.xlabel = '';\n        this.title = 'DateCircle title';\n        this.colormap = new ColorMap('rainbow');\n        super.defineDimensions();\n        this.domElem.classList.add('punchcard-date-circle');\n        this.update();\n\n    }\n\n    protected drawSymbols(): DateCircle {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft;\n        const dy: number = this.marginTop + h;\n        const symbolMargin = {left: 0, right: 0, top: 0, bottom: 0}; // pixels\n        const wDays: number = moment(this.dateTo).diff(moment(this.dateFrom), 'days', true);\n\n        const symbolWidth: number = w / wDays - symbolMargin.left - symbolMargin.right;\n        const symbolHeight: number = h / 24.0 - symbolMargin.top - symbolMargin.bottom;\n        const r: number = Math.min(symbolWidth, symbolHeight) / 2 - 2;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        const group = this.dim.dateAndHourOfDay.group();\n        group.all().forEach((d: any) => {\n            // parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        const data: any = group.all();\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (const elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n        // draw the circles\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('circle.symbol')\n                .data(data)\n                .enter()\n                .append('circle')\n                    .attr('class', 'symbol')\n                    .attr('cx', (d: any) => {\n                        return this.dateScale(new Date(d.key[this.datekey]));\n                        })\n                    .attr('cy', (d: any) => {\n                        return this.todScale(parseInt(d.key.hourOfDay, 10)) + symbolMargin.top + symbolHeight / 2;\n                    })\n                    .attr('r', (d: any) => {\n                        const numer: number = d.value - this.colormap.cLimLow;\n                        const denom: number = this.colormap.cLimHigh - this.colormap.cLimLow;\n                        if (denom === 0) {\n                            return Math.max(r, 1);\n                        } else {\n                            return Math.max(r * numer / denom, 1);\n                        }\n                    })\n                    .attr('fill', (d: any) => {\n                        return this.colormap.getColorRGB(d.value);\n                    })\n                    .on('click', (d: any) => {\n                        this.onClick(d);\n                    })\n                    .on('mouseover', (d: any) => {\n                        this.onMouseOver(d);\n                    })\n                    .on('mouseout', () => {\n                        this.onMouseOut();\n                    });\n\n        return this;\n\n    }\n\n}\n","import * as CrossFilter from 'crossfilter';\nimport * as d3 from 'd3';\nimport * as moment from 'moment';\n\nimport {Base} from './Base';\nimport {ColorMap} from './colormap';\n\n/**\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\n */\nexport class DateRect extends Base {\n\n    protected dateScale: d3.time.Scale<any, any>;\n    protected dateFrom: Date;\n    protected dateTo: Date;\n\n    /**\n     * Constructor method for DateRect\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\n     * containing the data.\n     * @param  {string} domElemId name of the DOM element to draw in.\n     * @return {[type]} A reference to an instance of DateRect.\n     */\n    constructor(cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\n\n        super(cf, domElemId, datekey);\n\n        this.xlabel = '';\n        this.title = 'DateRect title';\n        this.colormap = new ColorMap('default');\n        this.defineDimensions();\n        this.domElem.classList.add('punchcard-date-rect');\n        this.update();\n\n    }\n\n    /**\n     * Defines the crossfilter dimensions as used by this class\n     * @return {Base} A reference to an instance of DateRect.\n     */\n    protected defineDimensions(): DateRect {\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        this.dim.dateAndHourOfDay = this.cf.dimension((d: any) => {\n            let m: moment.Moment;\n            if (d.hasOwnProperty(this.datekey)) {\n                m = moment(d[this.datekey]);\n                const obj: any = {};\n                obj[this.datekey] = m.format('YYYY-MM-DD');\n                obj.hourOfDay =  m.hour();\n                // stringify() and later, parse() to get keyed objects\n                return JSON.stringify(obj);\n            } else {\n                throw new Error('datekey undefined');\n            }\n        });\n        this.canDraw = true;\n        return this;\n    }\n\n    /**\n     * This method defines which other methods to call in order to create\n     * a punchcard graph with the date on the horizontal axis and the time of\n     * day on the vertical axis. Mostly calls methods of the parent class, Base,\n     * but for example the symbols for this class are SVG rects, so it calls its\n     * own method .drawSymbols() for that.\n     *\n     * Successful drawing depends on whether the container is currently visible,\n     * and whether there is enough information in the instance to draw anything\n     * at all.\n     *\n     * This method overrides stub method in parent class.\n     *\n     * @return {DateRect} A reference to an instance of DateRect.\n     */\n    protected draw(): DateRect {\n\n        if (this.domElem.classList.contains('hidden')) {\n            // div is hidden\n            return this;\n        } else {\n            // div is visible\n            if (this.canDraw) {\n                // dimensions have been defined\n                super.drawSvg();\n                super.drawChartBody();\n                this.drawHorizontalAxis();\n                super.drawHorizontalAxisLabel();\n                super.drawVerticalAxis();\n                super.drawVerticalAxisLabel();\n                super.drawTitle();\n                this.drawSymbols();\n                super.drawBox();\n                super.drawLegend();\n                super.drawFooter();\n            }\n            return this;\n        }\n    }\n\n    /**\n     * This method adds an SVG g element with many SVG rects in it. Each rect\n     * represents the count of how many data rows fall within the area covered\n     * by the rect, where the horizontal boundaries dictate the date range and\n     * the vertical boundaries dictate the time of day range.\n     * @return {DateRect} A reference to the instance of DateRect.\n     */\n    protected drawSymbols(): DateRect {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft;\n        const dy: number = this.marginTop + h;\n        const symbolMargin = {left: 0, right: 0, top: 0, bottom: 0}; // pixels\n        const wDays: number = moment(this.dateTo).diff(moment(this.dateFrom), 'days', true);\n\n        const symbolWidth: number = w / wDays - symbolMargin.left - symbolMargin.right;\n        const symbolHeight: number = h / 24.0 - symbolMargin.top - symbolMargin.bottom;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        const group = this.dim.dateAndHourOfDay.group();\n        group.all().forEach((d: any) => {\n            // parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        const data: any = group.all();\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (const elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n        // draw the rects\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', (d: any) => {\n                        return this.dateScale(new Date(d.key[this.datekey]));\n                        })\n                    .attr('y', (d: any) => {\n                        return this.todScale(parseInt(d.key.hourOfDay, 10));\n                    })\n                    .attr('width', symbolWidth)\n                    .attr('height', symbolHeight)\n                    .attr('fill', (d: any) => {\n                        return this.colormap.getColorRGB(d.value);\n                    })\n                    .on('click', (d: any) => {\n                        this.onClick(d);\n                    })\n                    .on('mouseover', (d: any) => {\n                        this.onMouseOver(d);\n                    })\n                    .on('mouseout', () => {\n                        this.onMouseOut();\n                    });\n\n        return this;\n\n    }\n\n    /*\n     * overrides method from Base\n     */\n    protected onMouseOver(d: any): DateRect {\n        const str: string = 'x:' + d.key[this.datekey] +\n            ', y:' + d.key.hourOfDay +\n            ', count:' + d.value;\n        this.svg.select('g.footer').select('text').text(str);\n        return this;\n    }\n\n    protected onMouseOut(): DateRect {\n        this.svg.select('g.footer').select('text').text('');\n        return this;\n    }\n\n    /**\n     * Adds an SVG g element containing a horizontal d3.time.scale axis to the\n     * DOM, representing the date.\n     * @return {DateRect} A reference to an instance of DateRect.\n     */\n    private drawHorizontalAxis(): DateRect {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const dx: number = this.marginLeft;\n        const dy: number = this.domElem.clientHeight - this.marginBottom;\n\n        const firstResultDate = new Date(this.dim.dateAndHourOfDay.bottom(1)[0][this.datekey]);\n        this.dateFrom = new Date(firstResultDate.getFullYear(),\n            firstResultDate.getMonth(), firstResultDate.getDate(), 0, 0, 0, 0);\n\n        const lastResultDate = new Date(this.dim.dateAndHourOfDay.top(1)[0][this.datekey]);\n        this.dateTo = new Date(lastResultDate.getFullYear(),\n            lastResultDate.getMonth(), lastResultDate.getDate(), 23, 59, 59, 999);\n\n        let tickFormat: d3.time.Format;\n        let ticks: number | any; // FIXME second type should be Date[] but that doesn't work somehow\n        const nHoursDiff: number = moment(this.dateTo).diff(moment(this.dateFrom), 'hour', true);\n\n        if (nHoursDiff > 5 * 24) {\n            tickFormat = d3.time.format('%a %b %-d, %Y');\n            ticks = 7;\n        } else {\n            tickFormat = d3.time.format('%a %b %-d, %Y');\n            ticks = d3.time.days;\n        }\n\n        this.dateScale = d3.time.scale()\n            .range([0, w])\n            .domain([this.dateFrom,\n                     this.dateTo]);\n\n        const dateAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.dateScale)\n            .ticks(ticks)\n            .tickFormat(tickFormat);\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(dateAxis);\n\n        // doing style stuff in JavaScript is considered bad practice...:\n        this.svg.select('.horizontal-axis')\n            .selectAll('text')\n                .attr('x', -10)\n                .attr('y', 0)\n                .attr('dy', '.35em')\n                .style('text-anchor', 'end');\n\n        return this;\n\n    }\n}\n","\nimport * as CrossFilter from 'crossfilter';\n\nimport {ColorMap} from './colormap';\nimport {WeekdayRect} from './WeekdayRect';\n\n/**\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\n */\nexport class WeekdayCircle extends WeekdayRect {\n\n    constructor(cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\n\n        super(cf, domElemId, datekey);\n        // ...but reset these properties\n        this.domElem.classList.remove('punchcard-weekday-rect');\n        this.canDraw = false;\n\n        this.xlabel = 'Day of week';\n        this.title = 'WeekdayCircle title';\n        this.colormap = new ColorMap('blues');\n        super.defineDimensions();\n        this.domElem.classList.add('punchcard-weekday-circle');\n        this.update();\n    }\n\n    /**\n     * This method adds an SVG g element containing many SVG circle elements,\n     * i.e. the 'symbols', to the DOM. Each symbol represents the count of how\n     * many rows from the data fall on a given day/time-of-day combination.\n     * @return {WeekdayCircle} Returns a reference to the instance of\n     * WeekdayCircle\n     */\n    protected drawSymbols(): WeekdayCircle {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft;\n        const dy: number = this.marginTop + h;\n        const symbolMargin = {left: 2, right: 2, top: 2, bottom: 2}; // pixels\n        const symbolWidth: number = w / 7 - symbolMargin.left - symbolMargin.right;\n        const symbolHeight: number = h / 24 - symbolMargin.top - symbolMargin.bottom;\n\n        const r: number = Math.min(symbolWidth, symbolHeight) / 2 - 2;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        const group = this.dim.weekdayAndHourOfDay.group();\n        group.all().forEach((d: any) => {\n            // parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        const data: any = group.all();\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (const elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n        // draw the circles\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('circle.symbol')\n                .data(data)\n                .enter()\n                .append('circle')\n                    .attr('class', 'symbol')\n                    .attr('cx', (d: any) => {\n                        return this.dayOfWeekScale(d.key.weekday) + symbolMargin.left;\n                    })\n                    .attr('cy', (d: any) => {\n                        return this.todScale(d.key.hourOfDay) + symbolHeight / 2 + symbolMargin.top;\n                    })\n                    .attr('r', (d: any) => {\n                        const numer: number = d.value - this.colormap.cLimLow;\n                        const denom: number = this.colormap.cLimHigh - this.colormap.cLimLow;\n                        if (denom === 0) {\n                            return Math.max(r, 1);\n                        } else {\n                            return Math.max(r * numer / denom, 1);\n                        }\n                    })\n                    .attr('fill', (d: any) => {\n                        return this.colormap.getColorRGB(d.value);\n                    })\n                    .on('click', (d: any) => {\n                        this.onClick(d);\n                    })\n                    .on('mouseover', (d: any) => {\n                        this.onMouseOver(d);\n                    })\n                    .on('mouseout', () => {\n                        this.onMouseOut();\n                    });\n\n        return this;\n    }\n\n}\n","\nimport * as CrossFilter from 'crossfilter';\nimport * as d3 from 'd3';\nimport * as moment from 'moment';\n\nimport {Base} from './Base';\nimport {ColorMap} from './colormap';\n\n/**\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\n */\nexport class WeekdayRect extends Base {\n\n    protected dayOfWeekScale: d3.scale.Ordinal<any, any>;\n    protected xFrom: number;\n    protected xTo: number;\n\n    /**\n     * Constructor method for making a punchcard visualization with the day of\n     * week on the horizontal axis, and hour of day on the vertical axis, using\n     * rectangular symbols to represent how many rows from the input data fall\n     * within the area covered by each rectangle.\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\n     * containing the data.\n     * @param  {string} domElemId Name of the DOM element in which to draw.\n     * @return {[type]} A reference to the instance of WeekdayRect.\n     */\n    constructor(cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\n\n        super(cf, domElemId, datekey);\n\n        this.marginBottom = 50;\n        this.xlabel = 'Day of week';\n        this.title = 'WeekdayRect title';\n        this.colormap = new ColorMap('summer');\n        this.defineDimensions();\n        this.domElem.classList.add('punchcard-weekday-rect');\n        this.update();\n\n    }\n\n    /**\n     * define the crossfilter dimensions as used by this class\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect\n     */\n    protected defineDimensions(): WeekdayRect {\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n\n        this.dim.weekdayAndHourOfDay = this.cf.dimension((d: any) => {\n            // stringify() and later, parse() to get keyed objects\n            let m: moment.Moment;\n            if (d.hasOwnProperty(this.datekey)) {\n                m = moment(d[this.datekey]);\n                const obj: any = {};\n                obj.weekday = m.format('ddd');\n                obj.hourOfDay = m.hour();\n                return JSON.stringify(obj);\n            } else {\n                throw new Error('datekey undefined');\n            }\n        });\n        this.canDraw = true;\n\n        return this;\n    }\n\n    /**\n     * This method defines which other methods to call in order to create\n     * a punchcard graph with the day of week on the horizontal axis and the\n     * time of day on the vertical axis. Mostly calls methods of the parent\n     * class, Base, but for example the symbols for this class are SVG rects,\n     * so it calls its own method .drawSymbols() for that.\n     *\n     * Successful drawing depends on whether the container is currently visible,\n     * and whether there is enough information in the instance to draw anything\n     * at all.\n     *\n     * This method overrides stub method in parent class.\n     *\n     * @return {WeekdayRect} A reference to an instance of WeekdayRect.\n     */\n    protected draw(): WeekdayRect {\n\n        if (this.domElem.classList.contains('hidden')) {\n            // div is hidden\n            return this;\n        } else {\n            // div is visible\n            if (this.canDraw) {\n                // dimensions have been defined\n                super.drawSvg();\n                super.drawChartBody();\n                this.drawHorizontalAxis();\n                super.drawHorizontalAxisLabel();\n                super.drawVerticalAxis();\n                super.drawVerticalAxisLabel();\n                super.drawTitle();\n                this.drawSymbols();\n                super.drawBox();\n                super.drawLegend();\n                super.drawFooter();\n            }\n\n            return this;\n        }\n    }\n\n    /**\n     * This method adds an SVG g element with many SVG rects in it. Each rect\n     * represents the count of how many data rows fall within the area covered\n     * by the rect, where the horizontal boundaries dictate the day-of-week and\n     * the vertical boundaries dictate the time of day range.\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect.\n     */\n    protected drawSymbols(): WeekdayRect {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const h: number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.marginLeft;\n        const dy: number = this.marginTop + h;\n        const symbolMargin = {left: 0, right: 0, top: 0, bottom: 0}; // pixels\n        const symbolWidth: number = w / 7 - symbolMargin.left - symbolMargin.right;\n        const symbolHeight: number = h / 24 - symbolMargin.top - symbolMargin.bottom;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        const group = this.dim.weekdayAndHourOfDay.group();\n        group.all().forEach((d: any) => {\n            // parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        const data: any = group.all();\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (const elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n        // draw the rects\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', (d: any) => {\n                        return this.dayOfWeekScale(d.key.weekday) - symbolWidth / 2;\n                    })\n                    .attr('y', (d: any) => {\n                        return this.todScale(d.key.hourOfDay);\n                    })\n                    .attr('width', symbolWidth)\n                    .attr('height', symbolHeight)\n                    .attr('fill', (d: any) => {\n                        return this.colormap.getColorRGB(d.value);\n                    })\n                    .on('click', (d: any) => {\n                        this.onClick(d);\n                    })\n                    .on('mouseover', (d: any) => {\n                        this.onMouseOver(d);\n                    })\n                    .on('mouseout', () => {\n                        this.onMouseOut();\n                    });\n\n        return this;\n    }\n\n    /*\n     * overrides method from Base\n     */\n    protected onMouseOver(d: any): WeekdayRect {\n\n        const str: string = 'x:' + d.key.weekday +\n            ', y:' + d.key.hourOfDay +\n            ', count:' + d.value;\n        this.svg.select('g.footer').select('text').text(str);\n        return this;\n    }\n\n    protected onMouseOut(): WeekdayRect {\n        this.svg.select('g.footer').select('text').text('');\n        return this;\n    }\n\n    /**\n     * Adds an SVG g element containing a d3.scale.ordinal for plotting\n     * the day of the week on the horizontal axis of the punchcard graph.\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect.\n     */\n    private drawHorizontalAxis(): WeekdayRect {\n\n        const w: number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        const dx: number = this.marginLeft;\n        const dy: number = this.domElem.clientHeight - this.marginBottom;\n\n        const range: number[] = [];\n        const ndays: number = 7.0;\n        for (const r of [0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.0]) {\n            range.push(w * r / ndays);\n        }\n\n        this.dayOfWeekScale = d3.scale.ordinal()\n            .range(range)\n            .domain(['', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', '']);\n\n        const xAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.dayOfWeekScale)\n            .tickValues(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\n            .innerTickSize(5)\n            .outerTickSize(0);\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(xAxis);\n\n        return this;\n\n    }\n\n}\n","\n/**\n * Associates a point in the domain space to a color\n * @type {Object}\n */\nexport interface IColorTableItem {\n    at: number;\n    color: [number, number, number];\n}\n\n/**\n * An array of IColorTableItems\n * @type {[type]}\n */\nexport type ColorTable = IColorTableItem[];\n\n/**\n * ColorMap helps you associate values from the domain to rgba color values,\n * where each channel is in the range [0,255]\n */\nexport class ColorMap {\n    /**\n     * if the user does not specify which ColorMap she wants to use,\n     * defaultColorTable is what she'll get.\n     * @type {ColorTable}\n     */\n    static defaultColorTable: ColorTable = [\n        {\n            at: Number.NEGATIVE_INFINITY,\n            color: [255, 255, 255, 255]\n        },\n        {\n            at: 0.0,\n            color: [8, 106, 227, 0]\n        },\n        {\n            at: 1.0,\n            color: [227, 8, 88, 0]\n        },\n        {\n            at: Number.POSITIVE_INFINITY,\n            color: [255, 255, 255, 255]\n        }\n    ];\n    /**\n     * Array of IColorTableItems, where each IColorTableItem associates a point\n     * along the domain's number line to an rgba color.\n     * @type {ColorTable}\n     */\n    public colortable: ColorTable;\n    /**\n     * Domain value assocatiated with the lowest color from the ColorMap.\n     * @type {number}\n     */\n    public cLimLow: number;\n    /**\n     * Domain value assocatiated with the highest color from the ColorMap.\n     * @type {number}\n     */\n    public cLimHigh: number;\n\n    /**\n     * [constructor description]\n     * @param  {ColorTable|string} colortable [description]\n     * @return {[type]}                       [description]\n     */\n    constructor(colortable?: ColorTable|string) {\n\n        let str: string;\n        let ct: ColorTable;\n\n        if (colortable === undefined) {\n\n            str = 'default';\n            ct = this.expandColorTableStr(str);\n\n        } else if (typeof colortable === 'string') {\n\n            str = undefined;\n            ct = this.expandColorTableStr(colortable);\n\n        } else if (typeof colortable === 'object') {\n\n            str = undefined;\n            try {\n                ct = colortable as ColorTable;\n            } catch (Error) {\n                throw new Error('Can\\'t cast to ColorTable type');\n            }\n        } else {\n            throw new Error('Undefined behavior for these input arguments.');\n        }\n\n        // use my own compare function to sort the array based on the value of\n        // each element's 'at' property:\n        this.colortable = ct.sort(this.compare);\n\n        // adjust the color limits\n        const nColors = this.colortable.length;\n        this.cLimLow = this.colortable[1].at;\n        this.cLimHigh = this.colortable[nColors - 2].at;\n\n    }\n    /**\n     * Returns an rgba color array based on the current colormap (including the\n     * domain values at the upper and lower boundaries of the ColorMap) and an\n     * input domain value. The color values are determined by linear\n     * interpolation between the known color values, as defined by the ColorMap.\n     * @param  {number} at Value for which you want to know the associated color\n     * @return {[type]} 4-D vector containing rgba value of the color, with 0\n     * represetning zero intensity and 255 full intensity.\n     */\n    public getColor(at: number): [number, number, number, number] {\n\n        // if there is only one value in the range, lower the lower limit and\n        // raise the upper limit\n        if (this.cLimLow === this.cLimHigh) {\n            this.cLimLow -= 0.5;\n            this.cLimHigh += 0.5;\n        }\n\n        const atUnity = (at - this.cLimLow) / (this.cLimHigh - this.cLimLow);\n        const nColors = this.colortable.length;\n\n        let prev: IColorTableItem;\n        let next: IColorTableItem;\n\n        for (let iColor = 0; iColor < nColors; iColor += 1) {\n            const cond1 = this.colortable[iColor].at <= atUnity;\n            const cond2 = atUnity < this.colortable[iColor + 1].at;\n            if (cond1 && cond2) {\n                prev = this.colortable[iColor];\n                next = this.colortable[iColor + 1];\n                break;\n            }\n        }\n\n        const atRelative: number = (atUnity - prev.at) / (next.at - prev.at);\n        const theColor: [number, number, number, number] = [\n            Math.floor(prev.color[0] + (next.color[0] - prev.color[0]) * atRelative),\n            Math.floor(prev.color[1] + (next.color[1] - prev.color[1]) * atRelative),\n            Math.floor(prev.color[2] + (next.color[2] - prev.color[2]) * atRelative),\n            255\n        ];\n\n        for (const channel of theColor) {\n            if (channel < 0 || channel > 255) {\n                throw new Error('Calculated color out of bounds.');\n            }\n        }\n\n        return theColor;\n    }\n\n    /**\n     * CSS string representation of the result returned by ColorMap.getColor().\n     * Note that the string does not include a transparency value.\n     * @param  {number} at Value for which you want to know the associated color.\n     * @return {string} CSS string representing the rgb color.\n     */\n    public getColorRGB(at: number): string {\n\n        let color: [number, number, number];\n        color = this.getColor(at);\n        return 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';\n    }\n\n    /**\n     * Add a IColorTableItem to the current ColorMap\n     * @param  {IColorTableItem} color Color to add, with linkage to domain value.\n     * @return {ColorMap} Updated ColorMap\n     */\n    public addColor(color: IColorTableItem): ColorMap {\n\n        this.colortable.push(color);\n        this.colortable = this.colortable.sort(this.compare);\n\n        return this;\n    }\n\n    /**\n     * Add multiple IColorTableItems to the ColorMap\n     * @param  {ColorTable} colors Colors to add to the ColorMap\n     * @return {ColorMap} Updated Colormap\n     */\n    public addColors(colors: ColorTable): ColorMap {\n\n        for (const elem of colors) {\n            this.colortable.push(elem);\n        }\n        this.colortable = this.colortable.sort(this.compare);\n\n        return this;\n    }\n\n    /**\n     * Returns a ColorTable based on an input string\n     * @param  {string} input string, e.g. 'default', 'gray', 'empty',\n     * 'autumn', 'blues', 'summer', 'rainbow'\n     * @return {ColorTable} The ColorTable associated with the input string\n     */\n    protected expandColorTableStr(str: string): ColorTable {\n\n        let colortable: ColorTable;\n\n        switch (str) {\n            case 'default': {\n                colortable = ColorMap.defaultColorTable;\n                break;\n            }\n            case 'gray': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [0, 0, 0, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [255, 255, 255, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'empty': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'autumn': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [255, 0, 0, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [255, 255, 0, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'blues': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [0, 0, 255, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [0, 255, 255, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'summer': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [8, 160, 120, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [252, 252, 42, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'rainbow': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at: 0.000,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at: 0.125,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at: 0.250,\n                        color: [145, 255,   0,  0]\n                    },\n                    {\n                        at: 0.375,\n                        color: [  0, 255,  54,  0]\n                    },\n                    {\n                        at: 0.500,\n                        color: [  0, 179, 255,  0]\n                    },\n                    {\n                        at: 0.625,\n                        color: [ 10,   0, 255,  0]\n                    },\n                    {\n                        at: 0.750,\n                        color: [171,   0, 255,  0]\n                    },\n                    {\n                        at: 0.875,\n                        color: [255,   0, 159,  0]\n                    },\n                    {\n                        at: 1.000,\n                        color: [255,  89,   0,  0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255,  89,   0,  0]\n                    }\n                ];\n                break;\n            }\n            default: {\n                throw new Error('ColorMap.expandColorTableStr(): unknown case');\n            }\n        }\n\n        return colortable;\n\n    }\n\n    /**\n     * comparison function to help sort the IColorTableItems that make\n     * up a ColorTable. Basically when comparing objects, you have to specify\n     * which key you want to compare/sort on, which for this function is the\n     * value of a IColorTableItem's 'at' key.\n     * @param  {IColorTableItem} a the first IColorTableItem (left hand side\n     * member of the comparison)\n     * @param  {IColorTableItem} b the second IColorTableItem (right hand side\n     * of the comparison)\n     * @return {number} number identifying how a nd b compare. Returns -1 when\n     * a<b, 1 when a>b, or 0 when a==b\n     */\n    private compare(a: IColorTableItem, b: IColorTableItem): number {\n\n        if (a.at < b.at) {\n            return -1;\n        } else if (a.at > b.at) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n}\n","\nimport * as d3 from 'd3';\n\nimport {Base} from './Base';\nimport {DateCircle} from './DateCircle';\nimport {DateRect} from './DateRect';\nimport {WeekdayCircle} from './WeekdayCircle';\nimport {WeekdayRect} from './WeekdayRect';\n\n/**\n * Convenience type/collection of various punchcards\n */\nexport type PunchcardVisualization = Base|DateCircle|DateRect|\n                                    WeekdayCircle|WeekdayRect;\n\n/**\n * Legend adds a legend to an existing PunchcardVisualization, indicating which\n * color represents which domain value.\n */\nexport class Legend {\n    /**\n     * The Legend's sibling, i.e. the object that the legend is associated with.\n     * @type {PunchcardVisualization}\n     */\n    protected sibling: PunchcardVisualization;\n    /**\n     * The title of the Legend\n     * @type {string}\n     */\n    protected title: string;\n    /**\n     * Text to label the Legend's vertical axis\n     * @type {string}\n     */\n    protected ylabel: string;\n    /**\n     * The legend's horizontal axis scale\n     * @type {any}\n     */\n    protected horizontalScale: any;\n    /**\n     * The Legend's vertical axis scale\n     * @type {any}\n     */\n    protected verticalScale: any;\n    /**\n     * The Legend's width in pixels\n     * @type {number}\n     */\n    protected width: number;\n    /**\n     * The Legend's height in pixels\n     * @type {number}\n     */\n    protected height: number;\n\n    /**\n     * Margin in pixels to the left of the legend\n     * @type {number}\n     */\n    private _marginLeft: number;\n    /**\n     * Margin in pixels to the right of the legend\n     * @type {number}\n     */\n    private _marginRight: number;\n    /**\n     * Margin in pixels to the top of the legend\n     * @type {number}\n     */\n    private _marginTop: number;\n    /**\n     * Margin in pixels to the bottom of the legend\n     * @type {number}\n     */\n    private _marginBottom: number;\n    /**\n     * Adds a legend to an existing PunchcardVisualization.\n     * @param  {PunchcardVisualization} sibling The sibling element, for which\n     * a legend needs to be constructed\n     * @return {[type]} A reference to the instance of Legend\n     */\n    constructor(sibling: PunchcardVisualization) {\n\n        this.sibling = sibling;\n\n        // the margins around the legend body\n        this.marginLeft = 0;\n        this.marginRight = 60;\n        this.marginTop = this.sibling.marginTop;\n        this.marginBottom = this.sibling.marginBottom;\n\n        this.width = this.sibling.legendWidth - this.marginLeft - this.marginRight;\n        this.height = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n\n        this.title = '';\n        this.ylabel = '';\n\n    }\n\n    /**\n     * This method calls the other methods in a predefined succession, so that\n     * the whole legend gets drawn\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    public draw(): Legend {\n        // draw the legend\n\n        this.drawLegendBody();\n        this.drawHorizontalAxis();\n        this.drawVerticalAxis();\n        this.drawVerticalAxisLabel();\n        this.drawTitle();\n        this.drawSymbols();\n        this.drawBox();\n\n        return this;\n    }\n\n    /**\n     * Draws the box around the legend\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    protected drawBox(): Legend {\n        // draw box\n\n        const dx: number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        const dy: number = this.marginTop;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend legendbody-box')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', this.width)\n                .attr('height', this.height)\n                .attr('class', 'legend legendbody-box');\n\n        return this;\n    }\n\n    /**\n     * Draws the Legend's body (but not the colored symbols on it)\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    protected drawLegendBody(): Legend {\n        //\n        const dx: number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        const dy: number = this.sibling.domElem.clientHeight - this.marginBottom - this.height;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend legendbody')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', this.width)\n                .attr('height', this.height)\n                .attr('class', 'legend legendbody');\n\n        return this;\n    }\n\n    /**\n     * Draws the Legend's colored symbols, each of which is associated with a\n     * certain domain value.\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    protected drawSymbols(): Legend {\n\n        const dx: number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        const dy: number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        const data: any = [];\n        const nRects: number = 128;\n        for (let iRect = 0; iRect < nRects; iRect += 1) {\n            data.push({\n                    value: this.sibling.colormap.cLimLow +\n                            ((iRect + 0.5) / nRects) * (this.sibling.colormap.cLimHigh - this.sibling.colormap.cLimLow)\n                });\n        }\n\n        const symbolHeight: number = this.height / nRects;\n\n        // draw the rects\n        this.sibling.svg\n            .append('g')\n            .attr('class', 'punchcard-legend symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', 0)\n                    .attr('y', (d: any) => {\n                        return this.verticalScale(d.value) - 0.5 * symbolHeight;\n                    })\n                    .attr('width', this.width)\n                    .attr('height', symbolHeight)\n                    .attr('fill', (d: any) => {\n                        return this.sibling.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n    }\n\n    /**\n     * Draws the Legend's title\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    protected drawTitle(): Legend {\n\n        const dx: number = this.sibling.domElem.clientWidth -\n            this.sibling.legendWidth + this.marginLeft + 0.5 * this.width;\n        const dy: number = this.marginTop - 20;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend title')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.title)\n            .attr('class', 'title');\n\n        return this;\n    }\n\n    /**\n     * Draws the Legend's vertical axis, that is used to read the domain value\n     * associated with a certain color.\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    protected drawVerticalAxis(): Legend {\n        //\n        const w: number = this.sibling.legendWidth - this.marginLeft - this.marginRight;\n        const h: number = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft + w;\n        const dy: number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        this.verticalScale = d3.scale.linear()\n            .range([0, -h])\n            .domain([this.sibling.colormap.cLimLow, this.sibling.colormap.cLimHigh]);\n\n        const verticalAxis = d3.svg.axis()\n            .orient('right')\n            .scale(this.verticalScale)\n            .innerTickSize(5)\n            .outerTickSize(5);\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend vertical-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(verticalAxis);\n\n        return this;\n\n    }\n\n    /**\n     * Draws the Legend's vertical axis text label\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    protected drawVerticalAxisLabel(): Legend {\n        //\n        const h: number = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n        const dx: number = this.sibling.domElem.clientWidth - this.marginRight + 40;\n        const dy: number = this.marginTop + 0.5 * h;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend vertical-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ') rotate(-90)')\n            .append('text')\n            .text(this.ylabel)\n            .attr('class', 'legend vertical-axis-label');\n\n        return this;\n\n    }\n\n    /**\n     * [marginLeft description]\n     * @param  {number} marginLeft [description]\n     * @return {[type]}            [description]\n     */\n    protected set marginLeft(marginLeft: number) {\n        this._marginLeft = Math.max(marginLeft, 0);\n    }\n\n    /**\n     * [marginLeft description]\n     * @return {number} [description]\n     */\n    protected get marginLeft(): number {\n        return this._marginLeft;\n    }\n\n    /**\n     * [marginRight description]\n     * @param  {number} marginRight [description]\n     * @return {[type]}             [description]\n     */\n    protected set marginRight(marginRight: number) {\n        this._marginRight = Math.max(marginRight, 0);\n    }\n\n    /**\n     * [marginRight description]\n     * @return {number} [description]\n     */\n    protected get marginRight(): number {\n        return this._marginRight;\n    }\n\n    /**\n     * [marginTop description]\n     * @param  {number} marginTop [description]\n     * @return {[type]}           [description]\n     */\n    protected set marginTop(marginTop: number) {\n        this._marginTop = Math.max(marginTop, this.sibling.marginTop);\n    }\n\n    /**\n     * [marginTop description]\n     * @return {number} [description]\n     */\n    protected get marginTop(): number {\n        return this._marginTop;\n    }\n\n    /**\n     * [marginBottom description]\n     * @param  {number} marginBottom [description]\n     * @return {[type]}              [description]\n     */\n    protected set marginBottom(marginBottom: number) {\n        this._marginBottom = Math.max(marginBottom, this.sibling.marginBottom);\n    }\n\n    /**\n     * [marginBottom description]\n     * @return {number} [description]\n     */\n    protected get marginBottom(): number {\n        return this._marginBottom;\n    }\n\n    /**\n     * Draws the Legend's horizontal axis\n     * @return {Legend} Returns a reference to the instance of Legend\n     */\n    private drawHorizontalAxis(): Legend {\n\n        const dx: number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        const dy: number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' );\n\n        return this;\n    }\n\n}\n","\n/**\n * This is the Punchcards module\n */\nexport {Base} from './Base';\nexport {ColorMap} from './colormap';\nexport {DateCircle} from './DateCircle';\nexport {DateRect} from './DateRect';\nexport {Legend} from './legend';\nexport {WeekdayCircle} from './WeekdayCircle';\nexport {WeekdayRect} from './WeekdayRect';\n"]}