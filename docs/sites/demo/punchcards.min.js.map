{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/base.ts","src/colormap.ts","src/date-circle.ts","src/date-rect.ts","src/legend.ts","src/punchcards.ts","src/weekday-circle.ts","src/weekday-rect.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","punchcards","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","colormap_1","legend_1","Base","cf","domElemId","datekey","domElem","document","getElementById","dim","canDraw","marginLeft","marginRight","marginTop","marginBottom","legendWidth","ylabel","title","colormap","ColorMap","classList","add","addTooltip","that","addEventListener","onResize","prototype","draw","drawBox","w","clientWidth","h","clientHeight","dx","dy","svg","append","attr","drawChartBody","drawHorizontalAxisLabel","text","xlabel","drawLegend","legend","Legend","drawSvg","d3","select","drawTitle","drawVerticalAxis","todScale","scale","linear","range","domain","todAxis","axis","orient","tickValues","innerTickSize","outerTickSize","drawVerticalAxisLabel","div","firstChild","removeChild","onMouseOver","d","console","log","onClick","updateMinHeight","top","bottom","style","minHeight","toString","updateMinWidth","left","right","minWidth","tooltip","createElement","insertAdjacentElement","Object","defineProperty","_marginLeft","_marginRight","_marginTop","_marginBottom","_legendWidth","minimumWidth","Math","max","colortable","str","ct","expandColorTableStr","undefined","sort","compare","nColors","cLimLow","at","cLimHigh","b","defaultColorTable","Number","NEGATIVE_INFINITY","color","POSITIVE_INFINITY","getColor","atUnity","prev","next","iColor","cond1","cond2","atRelative","theColor","floor","_i","theColor_1","channel","getColorRGB","addColor","push","addColors","colors","colors_1","elem","date_rect_1","DateCircle","_super","__extends","defineDimensions","remove","drawSymbols","symbolMargin","wDays","moment","dateTo","diff","dateFrom","symbolWidth","symbolHeight","min","group","dateAndHourOfDay","all","forEach","key","JSON","parse","data","lowest","highest","data_1","value","selectAll","enter","dateScale","Date","parseInt","hourOfDay","numer","denom","on","DateRect","base_1","dimension","m","hasOwnProperty","obj","format","hour","stringify","contains","drawHorizontalAxis","firstResultDate","getFullYear","getMonth","getDate","lastResultDate","tickFormat","ticks","nHoursDiff","time","days","dateAxis","sibling","width","height","drawLegendBody","horizontalAxis","horizontalScale","nRects","iRect","verticalScale","verticalAxis","date_circle_1","weekday_circle_1","WeekdayCircle","weekday_rect_1","WeekdayRect","weekdayAndHourOfDay","dayOfWeekScale","ndays","_a","ordinal","xAxis"],"mappings":"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","file":"dist/punchcards.min.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import 'crossfilter';\r\nimport 'd3';\r\n\r\n\r\nimport {ColorMap} from './colormap';\r\nimport {Legend} from './legend';\r\n\r\n\r\n/**\r\n * This is the base class for all punchcards. It provides the methods that are\r\n * shared between all punchcards, such as drawing of the vertical axis (which is\r\n * always hour of day), drawing of the background box, generation of the SVG DOM\r\n * element, and so on.\r\n */\r\nexport class Base {\r\n\r\n    /**\r\n     * The crossfilter that contains the data which needs to be visualized.\r\n     * @type {CrossFilter.CrossFilter<any>}\r\n     */\r\n    protected cf: CrossFilter.CrossFilter<any>;\r\n    /**\r\n     * The colormap: i.e. the element that determines what color is used to\r\n     * display a certain value.\r\n     * @type {ColorMap}\r\n     */\r\n    public colormap: ColorMap;\r\n    /**\r\n     * The user-defined dimensions that are used to manipulate the crossfilter\r\n     * data.\r\n     * @type {any}\r\n     */\r\n    protected dim: any;\r\n    /**\r\n     * The element of the DOM where the punchcard should be visualized.\r\n     * @type {HTMLElement}\r\n     */\r\n    public domElem: HTMLElement;\r\n    /**\r\n     * The element ID of the this._domElem object.\r\n     * @type {string}\r\n     */\r\n    protected domElemId: string;\r\n    /**\r\n     * The SVG DOM element that is used to draw a punchcard in.\r\n     * @type {any}\r\n     */\r\n    public svg: any;\r\n    /**\r\n     * The space in pixels between the left side of the axis background and\r\n     * edge of the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginLeft: number;\r\n    /**\r\n     * The space in pixels between the right side of the  axis background and\r\n     * edge of the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginRight: number;\r\n    /**\r\n     * The space in pixels between the top side of axis background and edge of\r\n     * the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginTop: number;\r\n    /**\r\n     * The space in pixels between the bottom side of axis background and edge\r\n     * of the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginBottom: number;\r\n    /**\r\n     * Text to use as title for the graph\r\n     * @type {string}\r\n     */\r\n    protected title: string;\r\n    /**\r\n     * Text to use as label for the horizontal axis\r\n     * @type {string}\r\n     */\r\n    protected xlabel: string;\r\n    /**\r\n     * Text to use as label for the vertical axis\r\n     * @type {string}\r\n     */\r\n    protected ylabel: string;\r\n    /**\r\n     * d3 time scale for the vertical axis\r\n     * @type {d3.scale.Linear<any, any>}\r\n     */\r\n    protected todScale: d3.scale.Linear<any, any>;\r\n    /**\r\n     * height of the axis\r\n     * @type {number}\r\n     */\r\n    protected height: number;\r\n    /**\r\n     * width in pixels that is occupied by the legend\r\n     * @type {number}\r\n     */\r\n    private _legendWidth: number;\r\n    /**\r\n     * Whether or not there is enough data defined to be able to draw anything.\r\n     * @type {boolean}\r\n     */\r\n    public canDraw: boolean;\r\n    /**\r\n     * Defines which key of your input data contains the datetime information\r\n     * based on which you want to create the symbols in the punchcard's body.\r\n     * The default value is 'datestr'\r\n     * @type {string}\r\n     */\r\n    protected datekey:string;\r\n\r\n    protected tooltip: HTMLElement;\r\n\r\n\r\n    /**\r\n     * Constructs an instance of Base when given a crossfilter object and the\r\n     * name of a DOM element to draw in.\r\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\r\n     * containing the data\r\n     * @param  {string} domElemId DOM element identifier for the div in which to\r\n     * draw the punchcard graph\r\n     * @return {[type]} Returns an instance of Base class\r\n     */\r\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\r\n\n        // the crossfilter object\n        this.cf = cf;\n\n        // the name of the DOM element\n        this.domElemId = domElemId;\n\n        // the DOM element by ID\n        this.domElem = document.getElementById(this.domElemId);\n\n        // all the dimensions are collected into one object, dim, which is\n        // initialized here:\n        this.dim = {};\r\n\r\n        // can only draw stuff after user has defined some dimensions\r\n        this.canDraw = false;\r\n\r\n        // the margins around the graph body\n        this.marginLeft = 70;\n        this.marginRight = 30;\n        this.marginTop = 50;\n        this.marginBottom = 110;\n        this.legendWidth = 80;\n\n        this.ylabel = 'Time of day';\n        this.title = '';\n\n        this.datekey = datekey || 'datestr';\r\n        this.colormap = new ColorMap();\r\n\r\n        this.domElem.classList.add('punchcard-common');\r\n\r\n        this.addTooltip();\r\n\r\n        // beware: JavaScript magic happens here\n        let that:Base = this;\r\n        window.addEventListener('resize', function() {\r\n            that.onResize();\r\n        });\r\n    }\n\r\n\r\n\r\n\r\n    /**\r\n     * Placeholder method that does not do anything but needs to be here because\r\n     * it's called by .onResize(). This method should be overridden by classes\r\n     * that inherit from Base.\r\n     * @return {Base} return the (unchanged) instance of Base\r\n     */\r\n    public draw():Base {\r\n\r\n        // placeholder method to be overridden in classes that inherit from this class\r\n        return this;\r\n    }\r\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG rect element with which to draw a\r\n     * border around the punchcard graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawBox():Base {\r\n        //\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop;\n\n\n        this.svg.append('g')\n            .attr('class', 'chartbody-box')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', w)\n                .attr('height', h)\n                .attr('class', 'chartbody-box');\n\n        return this;\n    }\n\r\n\r\n\n    /**\r\n     * Appends an SVG g element containing an SVG rect, the size of which is\r\n     * determined by the size of the SVG element minus the margins on 4 sides,\r\n     * and minus the width taken up by the legend. The rect constitutes the\r\n     * background of the punchcard's axes.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawChartBody():Base {\r\n        //\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop;\n\n\n        this.svg.append('g')\n            .attr('class', 'chartbody')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', w)\n                .attr('height', h)\n                .attr('class', 'chartbody');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG text element with which to label\r\n     * the horizontal axis.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawHorizontalAxisLabel():Base {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft + 0.5 * w;\n        let dy:number = this.marginTop + h + 0.8 * this.marginBottom;\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.xlabel)\n            .attr('class', 'horizontal-axis-label');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds a Legend to the plot, while resizing the punchcard as necessary.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawLegend():Base {\r\n        // draw the legend\n\n        let legend:Legend = new Legend(this);\r\n        legend.draw();\n\n\n        return this;\n    }\n\r\n\r\n\r\n    /**\r\n     * Adds an SVG element to the DOM, so that other methods you can do d3\r\n     * things with it later.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawSvg():Base {\r\n\n        this.svg = d3.select(this.domElem).append('svg')\n            .attr('width', this.domElem.clientWidth)\n            .attr('height', this.domElem.clientHeight);\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG text element representing the\r\n     * title of the punchcard graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawTitle():Base {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let dx:number = this.marginLeft + 0.5 * w;\n        let dy:number = 0.5 * this.marginTop;\n\n        this.svg.append('g')\n            .attr('class', 'title')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.title)\n            .attr('class', 'title');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing a d3.linear.axis representing the hour\r\n     * of day.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawVerticalAxis():Base {\r\n        //\n        let dx:number = this.marginLeft;\n        let dy:number = this.domElem.clientHeight - this.marginBottom;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n\n\n        this.todScale = d3.scale.linear()\n            .range([-h, 0])\n            .domain([0.0, 24.0]);\n\n        let todAxis = d3.svg.axis()\n            .orient('left')\n            .scale(this.todScale)\n            .tickValues([0, 3, 6, 9, 12, 15, 18, 21, 24])\n            .innerTickSize(5)\n            .outerTickSize(0);\n\n        this.svg.append('g')\n            .attr('class', 'vertical-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(todAxis);\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG text element with which to label\r\n     * the vertical axis.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawVerticalAxisLabel():Base {\r\n        //\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = 0.3 * this.marginLeft;\n        let dy:number = this.marginTop + 0.5 * h;\n\n        this.svg.append('g')\n            .attr('class', 'vertical-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ') rotate(-90)')\n            .append('text')\n            .text(this.ylabel)\n            .attr('class', 'vertical-axis-label');\n\n        return this;\n\n    }\n\n\n\n\r\n\n\n    /**\r\n     * When the window is resized, redraw the punchcard graph in its entirety,\r\n     * while observing the new maximum size.\r\n     * @return {[type]} [description]\r\n     */\r\n    protected onResize() {\r\n\r\n        // get the div element that we want to redraw\r\n        let div = this.domElem;\r\n\r\n        // delete the contents of the div\r\n        while (div.firstChild) {\r\n            div.removeChild(div.firstChild);\r\n        }\r\n\r\n        this.draw();\r\n\r\n    }\r\n\r\n\r\n\r\n    protected onMouseOver(d:any) {\r\n        console.log(d);\r\n    }\r\n\r\n\r\n\r\n    protected onClick(d:any) {\r\n        console.log('click:' + d);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Sets the CSS style min-height such that the body of the punchcard graph\r\n     * cannot become smaller than 100px in height, while taking into account the\r\n     * margins on the top and bottom of the graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    private updateMinHeight():Base {\r\n\n        let top:number = this.marginTop;\n        let bottom:number = this.marginBottom;\n\n        if (typeof top === 'undefined' || top < 0) {\n            top = 0;\n        }\n\n        if (typeof bottom === 'undefined' || bottom < 0) {\n            bottom = 0;\n        }\n\n        this.domElem.style.minHeight = (top + bottom + 100).toString() + 'px';\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Sets the CSS style min-width such that the body of the punchcard graph\r\n     * cannot become narrower than 100px, while taking into account the\r\n     * margins on the left and right of the graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    private updateMinWidth():Base {\r\n\n        let left:number = this.marginLeft;\n        let right:number = this.marginRight;\n\n        if (typeof left === 'undefined' || left < 0) {\n            left = 0;\n        }\n\n        if (typeof right === 'undefined' || right < 0) {\n            right = 0;\n        }\n\n        this.domElem.style.minWidth = (left + right + 100).toString() + 'px';\n\n        return this;\n    }\n\n\r\n    protected addTooltip(): Base {\r\n\r\n        this.tooltip = document.createElement('div');\r\n        this.tooltip.classList.add('punchcard-tooltip');\r\n        this.domElem.insertAdjacentElement('beforeend', this.tooltip);\r\n        return this;\r\n    }\r\n\r\n\r\n\n    /**\r\n     * [marginLeft description]\r\n     * @param  {number} marginLeft [description]\r\n     * @return {[type]}            [description]\r\n     */\r\n    public set marginLeft(marginLeft:number) {\n        this._marginLeft = marginLeft;\n        this.updateMinWidth();\n    }\n\r\n    /**\r\n     * [marginLeft description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginLeft():number {\n        return this._marginLeft;\n    }\n\r\n    /**\r\n     * [marginRight description]\r\n     * @param  {number} marginRight [description]\r\n     * @return {[type]}             [description]\r\n     */\r\n    public set marginRight(marginRight:number) {\n        this._marginRight = marginRight;\n        this.updateMinWidth();\n    }\r\n\r\n    /**\r\n     * [marginRight description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginRight():number {\r\n        return this._marginRight;\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @param  {number} marginTop [description]\r\n     * @return {[type]}           [description]\r\n     */\r\n    public set marginTop(marginTop:number) {\n        this._marginTop = marginTop;\n        this.updateMinHeight();\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginTop():number {\n        return this._marginTop;\n    }\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @param  {number} marginBottom [description]\r\n     * @return {[type]}              [description]\r\n     */\r\n    public set marginBottom(marginBottom:number) {\n        this._marginBottom = marginBottom;\n        this.updateMinHeight();\n    }\r\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginBottom():number {\r\n        return this._marginBottom;\n    }\n\r\n    /**\r\n     * [legendWidth description]\r\n     * @param  {number} legendWidth [description]\r\n     * @return {[type]}             [description]\r\n     */\r\n    public set legendWidth(legendWidth:number) {\r\n        let minimumWidth:number = 50;\r\n        this._legendWidth = Math.max(legendWidth, 50);\r\n    }\r\n\r\n    /**\r\n     * [legendWidth description]\r\n     * @return {number} [description]\r\n     */\r\n    public get legendWidth():number {\r\n        return this._legendWidth;\r\n    }\r\n\r\n}\r\n\n\n","\n/**\r\n * Associates a point in the domain space to a color\r\n * @type {Object}\r\n */\r\ntype ColorTableItem = {\n    at   : number;\n    color: [number, number, number];\n}\n\r\n/**\r\n * An array of ColorTableItems\r\n * @type {[type]}\r\n */\r\ntype ColorTable = Array<ColorTableItem>;\r\n\n/**\r\n * ColorMap helps you associate values from the domain to rgba color values,\r\n * where each channel is in the range [0,255]\r\n */\r\nexport class ColorMap {\r\n\r\n    /**\r\n     * Array of ColorTableItems, where each ColorTableItem associates a point\r\n     * along the domain's number line to an rgba color.\r\n     * @type {ColorTable}\r\n     */\r\n    public colortable: ColorTable;\r\n    /**\r\n     * Domain value assocatiated with the lowest color from the ColorMap.\r\n     * @type {number}\r\n     */\r\n    public cLimLow: number;\r\n    /**\r\n     * Domain value assocatiated with the highest color from the ColorMap.\r\n     * @type {number}\r\n     */\r\n    public cLimHigh: number;\r\n    /**\r\n     * if the user does not specify which ColorMap she wants to use,\r\n     * defaultColorTable is what she'll get.\r\n     * @type {ColorTable}\r\n     */\r\n    static defaultColorTable:ColorTable = [\n        {\n            at: Number.NEGATIVE_INFINITY,\n            color: [255, 255, 255, 255]\n        },\n        {\n            at: 0.0,\n            color: [8, 106, 227, 0]\n        },\n        {\n            at: 1.0,\n            color: [227, 8, 88, 0]\n        },\n        {\n            at: Number.POSITIVE_INFINITY,\n            color: [255, 255, 255, 255]\n        }\n    ];\n\n    /**\r\n     * [constructor description]\r\n     * @param  {ColorTable|string} colortable [description]\r\n     * @return {[type]}                       [description]\r\n     */\r\n    constructor (colortable?:ColorTable|string) {\n\n        let str: string;\n        let ct : ColorTable;\r\n\r\n        if (typeof colortable === 'undefined') {\r\n\r\n            str = 'default';\r\n            ct = this.expandColorTableStr(str);\n\n        } else if (typeof colortable === 'string') {\n\r\n            str = undefined;\r\n            ct = this.expandColorTableStr(colortable);\n\n        } else if (typeof colortable === 'object') {\r\n\r\n            str = undefined;\r\n            try {\r\n                ct = <ColorTable>colortable;\r\n            } catch (Error) {\r\n                throw new Error('Can\\'t cast to ColorTable type');\r\n            }\r\n        } else {\r\n            throw new Error('Undefined behavior for these input arguments.');\r\n        }\r\n\n        // use my own compare function to sort the array based on the value of\n        // each element's 'at' property:\n        this.colortable = ct.sort(this.compare);\n\n        // adjust the color limits\n        let nColors = this.colortable.length;\n        this.cLimLow = this.colortable[1].at;\n        this.cLimHigh = this.colortable[nColors - 2].at;\n\n    }\n\n\n    /**\r\n     * comparison function to help sort the ColorTableItems that make\r\n     * up a ColorTable. Basically when comparing objects, you have to specify\r\n     * which key you want to compare/sort on, which for this function is the\r\n     * value of a ColorTableItem's 'at' key.\r\n     * @param  {ColorTableItem} a the first ColorTableItem (left hand side\r\n     * member of the comparison)\r\n     * @param  {ColorTableItem} b the second ColorTableItem (right hand side\r\n     * of the comparison)\r\n     * @return {number} number identifying how a nd b compare. Returns -1 when\r\n     * a<b, 1 when a>b, or 0 when a==b\r\n     */\r\n    private compare(a:ColorTableItem, b:ColorTableItem):number {\n\n        if (a.at < b.at) {\n            return -1;\n        } else if (a.at > b.at) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n\n    /**\r\n     * Returns a ColorTable based on an input string\r\n     * @param  {string} input string, e.g. 'default', 'gray', 'empty',\r\n     * 'autumn', 'blues', 'summer', 'rainbow'\r\n     * @return {ColorTable} The ColorTable associated with the input string\r\n     */\r\n    protected expandColorTableStr(str:string):ColorTable {\r\n\n        let colortable:ColorTable;\n\n        switch (str) {\n            case 'default': {\n                colortable = ColorMap.defaultColorTable;\r\n                break;\n            }\n            case 'gray': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [0, 0, 0, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [255, 255, 255, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\r\n            }\n            case 'empty': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'autumn': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [255, 0, 0, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [255, 255, 0, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'blues': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [0, 0, 255, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [0, 255, 255, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'summer': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [8, 160, 120, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [252, 252, 42, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'rainbow': {\n                colortable = [\n                    {\n                        at:Number.NEGATIVE_INFINITY,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at:0.000,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at:0.125,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at:0.250,\n                        color: [145, 255,   0,  0]\n                    },\n                    {\n                        at:0.375,\n                        color: [  0, 255,  54,  0]\n                    },\n                    {\n                        at:0.500,\n                        color: [  0, 179, 255,  0]\n                    },\n                    {\n                        at:0.625,\n                        color: [ 10,   0, 255,  0]\n                    },\n                    {\n                        at:0.750,\n                        color: [171,   0, 255,  0]\n                    },\n                    {\n                        at:0.875,\n                        color: [255,   0, 159,  0]\n                    },\n                    {\n                        at:1.000,\n                        color: [255,  89,   0,  0]\n                    },\n                    {\n                        at:Number.POSITIVE_INFINITY,\n                        color: [255,  89,   0,  0]\n                    }\n                ];\n                break;\n            }\n            default: {\n                throw new Error('ColorMap.expandColorTableStr(): unknown case');\n            }\n        }\n\n        return colortable;\n\n    }\n\n\n\n    /**\r\n     * Returns an rgba color array based on the current colormap (including the\r\n     * domain values at the upper and lower boundaries of the ColorMap) and an\r\n     * input domain value. The color values are determined by linear\r\n     * interpolation between the known color values, as defined by the ColorMap.\r\n     * @param  {number} at Value for which you want to know the associated color\r\n     * @return {[type]} 4-D vector containing rgba value of the color, with 0\r\n     * represetning zero intensity and 255 full intensity.\r\n     */\r\n    public getColor(at:number):[number, number, number, number] {\r\n\n        // if there is only one value in the range, lower the lower limit and\r\n        // raise the upper limit\r\n        if (this.cLimLow === this.cLimHigh) {\n            this.cLimLow -= 0.5;\n            this.cLimHigh += 0.5;\n        }\n\n        let atUnity = (at - this.cLimLow) / (this.cLimHigh - this.cLimLow);\n        let nColors = this.colortable.length;\n\n        let prev:ColorTableItem;\r\n        let next:ColorTableItem;\r\n\n        for (let iColor = 0; iColor < nColors; iColor++) {\n            let cond1 = this.colortable[iColor].at <= atUnity;\n            let cond2 = atUnity < this.colortable[iColor + 1].at;\n            if (cond1 && cond2) {\n                prev = this.colortable[iColor];\n                next = this.colortable[iColor + 1];\n                break;\n            }\n        }\n\n        let atRelative:number = (atUnity - prev.at) / (next.at - prev.at);\n        let theColor: [number, number, number, number] = [\n            Math.floor(prev.color[0] + (next.color[0] - prev.color[0]) * atRelative),\n            Math.floor(prev.color[1] + (next.color[1] - prev.color[1]) * atRelative),\n            Math.floor(prev.color[2] + (next.color[2] - prev.color[2]) * atRelative),\n            255\n        ];\n\n        for (let channel of theColor) {\n            if (channel < 0 || channel > 255) {\n                throw new Error('Calculated color out of bounds.');\n            }\n        }\n\n        return theColor;\n    }\n\n\n\n    /**\r\n     * CSS string representation of the result returned by ColorMap.getColor().\r\n     * Note that the string does not include a transparency value.\r\n     * @param  {number} at Value for which you want to know the associated color.\r\n     * @return {string} CSS string representing the rgb color.\r\n     */\r\n    public getColorRGB(at:number):string {\n\n        let color:[number, number, number];\n        color = this.getColor(at);\n        return 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';\n    }\n\n\n\n    /**\r\n     * Add a ColorTableItem to the current ColorMap\r\n     * @param  {ColorTableItem} color Color to add, with linkage to domain value.\r\n     * @return {ColorMap} Updated ColorMap\r\n     */\r\n    public addColor(color: ColorTableItem): ColorMap {\r\n\n        this.colortable.push(color);\n        this.colortable = this.colortable.sort(this.compare);\n\n        return this;\n    }\n\r\n    /**\r\n     * Add multiple ColorTableItems to the ColorMap\r\n     * @param  {ColorTable} colors Colors to add to the ColorMap\r\n     * @return {ColorMap} Updated Colormap\r\n     */\r\n    public addColors(colors:ColorTable): ColorMap {\r\n\n        for (let elem of colors) {\n            this.colortable.push(elem);\n        }\n        this.colortable = this.colortable.sort(this.compare);\n\n        return this;\n    }\n\n\n\r\n\r\n}","import 'crossfilter';\r\nimport 'd3';\r\nimport 'moment';\r\n\r\n\r\nimport {ColorMap} from './colormap';\r\nimport {DateRect} from './date-rect';\r\n\r\n\r\n/**\r\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\r\n */\r\nexport class DateCircle extends DateRect {\r\n\n\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\r\n\n        super(cf, domElemId, datekey);\r\n\r\n        this.xlabel = '';\n        this.title = 'DateCircle title';\r\n        this.colormap = new ColorMap('rainbow');\r\n        super.defineDimensions();\r\n        this.domElem.classList.remove('punchcard-date-rect');\r\n        this.domElem.classList.add('punchcard-date-circle');\r\n\r\n    }\n\n\n\n\n    protected drawSymbols():DateCircle {\r\n\n        // capture the this object\n        let that:DateCircle = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:0, right: 0, top: 0, bottom: 0}; // pixels\n        let wDays:number = moment(this.dateTo).diff(moment(this.dateFrom), 'days', true);\n\n        let symbolWidth :number = w / wDays - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24.0 - symbolMargin.top - symbolMargin.bottom;\n        let r:number = Math.min(symbolWidth, symbolHeight) / 2 - 2;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.dateAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the circles\r\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('circle.symbol')\n                .data(data)\n                .enter()\n                .append('circle')\n                    .attr('class', 'symbol')\n                    .attr('cx', function(d:any){\r\n                        return that.dateScale(new Date(d.key[that.datekey]));\r\n                        })\n                    .attr('cy', function(d:any){\r\n                        return that.todScale(parseInt(d.key.hourOfDay, 10)) + symbolMargin.top + symbolHeight / 2;\n                    })\n                    .attr('r', function(d:any) {\r\n                        let numer:number = d.value - that.colormap.cLimLow;\r\n                        let denom:number = that.colormap.cLimHigh - that.colormap.cLimLow;\r\n                        if (denom === 0) {\r\n                            return Math.max(r, 1);\r\n                        } else {\r\n                            return Math.max(r * numer / denom, 1);\r\n                        }\r\n                    })\r\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    })\r\n                    .on('click', function(d:any){\r\n                        that.onClick(d);\r\n                    })\r\n                    .on('mouseover', function(d:any){\r\n                        that.onMouseOver(d);\r\n                    });\r\n\n        return this;\n\n    }\n\n\n}\n\n\n","import 'crossfilter';\r\nimport 'd3';\r\nimport 'moment';\r\n\r\n\r\nimport {Base} from './base';\r\nimport {ColorMap} from './colormap';\r\n\r\n/**\r\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\r\n */\r\nexport class DateRect extends Base {\r\n\n    protected dateScale: d3.time.Scale<any, any>;\r\n    protected dateFrom: Date;\r\n    protected dateTo: Date;\r\n\n\r\n    /**\r\n     * Constructor method for DateRect\r\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\r\n     * containing the data.\r\n     * @param  {string} domElemId name of the DOM element to draw in.\r\n     * @return {[type]} A reference to an instance of DateRect.\r\n     */\r\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\r\n\n        super(cf, domElemId, datekey);\r\n\n        this.xlabel = '';\n        this.title = 'DateRect title';\r\n        this.colormap = new ColorMap('default');\r\n        this.defineDimensions();\r\n        this.domElem.classList.add('punchcard-date-rect');\r\n\r\n    }\n\n\n\n\n    /**\r\n     * Defines the crossfilter dimensions as used by this class\r\n     * @return {Base} A reference to an instance of DateRect.\r\n     */\r\n    protected defineDimensions():Base {\r\n\r\n        // store a reference to the instance\r\n        let that:DateRect = this;\r\n\r\n        // based on example from\r\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\r\n        this.dim.dateAndHourOfDay = this.cf.dimension(function (d:any) {\r\n            let m:moment.Moment;\r\n            if (d.hasOwnProperty(that.datekey)) {\r\n                m = moment(d[that.datekey]);\r\n                let obj:any = {};\r\n                obj[that.datekey] = m.format('YYYY-MM-DD');\r\n                obj['hourOfDay'] =  m.hour();\r\n                //stringify() and later, parse() to get keyed objects\r\n                return JSON.stringify(obj);\r\n            } else {\r\n                throw new Error('datekey undefined');\r\n            }\r\n        });\r\n        this.canDraw = true;\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * This method defines which other methods to call in order to create\r\n     * a punchcard graph with the date on the horizontal axis and the time of\r\n     * day on the vertical axis. Mostly calls methods of the parent class, Base,\r\n     * but for example the symbols for this class are SVG rects, so it calls its\r\n     * own method .drawSymbols() for that.\r\n     *\r\n     * Successful drawing depends on whether the container is currently visible,\r\n     * and whether there is enough information in the instance to draw anything\r\n     * at all.\r\n     *\r\n     * This method overrides stub method in parent class.\r\n     *\r\n     * @return {DateRect} A reference to an instance of DateRect.\r\n     */\r\n    public draw():DateRect {\r\n\n        if (this.domElem.classList.contains('hidden')) {\n            // div is hidden\n            return this;\n        } else {\r\n            // div is visible\r\n            if (this.canDraw) {\r\n                // dimensions have been defined\r\n                super.drawSvg();\r\n                super.drawChartBody();\r\n                this.drawHorizontalAxis();\r\n                super.drawHorizontalAxisLabel();\r\n                super.drawVerticalAxis();\r\n                super.drawVerticalAxisLabel();\r\n                super.drawTitle();\r\n                this.drawSymbols();\r\n                super.drawBox();\r\n                super.drawLegend();\r\n            }\r\n            return this;\r\n        }\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing a horizontal d3.time.scale axis to the\r\n     * DOM, representing the date.\r\n     * @return {DateRect} A reference to an instance of DateRect.\r\n     */\r\n    private drawHorizontalAxis():DateRect {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let dx:number = this.marginLeft;\n        let dy:number = this.domElem.clientHeight - this.marginBottom;\n\n        let firstResultDate = new Date(this.dim.dateAndHourOfDay.bottom(1)[0][this.datekey]);\r\n        this.dateFrom = new Date(firstResultDate.getFullYear(), firstResultDate.getMonth(), firstResultDate.getDate(), 0, 0, 0, 0);\n\n        let lastResultDate = new Date(this.dim.dateAndHourOfDay.top(1)[0][this.datekey]);\r\n        this.dateTo = new Date(lastResultDate.getFullYear(), lastResultDate.getMonth(), lastResultDate.getDate(), 23, 59, 59, 999);\n\n        let tickFormat:d3.time.Format;\r\n        let ticks: number | any; // FIXME second type should be Date[] but that doesn't work somehow\r\n        let nHoursDiff: number = moment(this.dateTo).diff(moment(this.dateFrom), 'hour', true);\n\n        if (nHoursDiff > 5 * 24) {\n            tickFormat = d3.time.format('%a %b %-d, %Y');\n            ticks = 7;\n        } else {\n            tickFormat = d3.time.format('%a %b %-d, %Y');\n            ticks = d3.time.days;\r\n        };\n\n        this.dateScale = d3.time.scale()\n            .range([0, w])\n            .domain([this.dateFrom,\n                     this.dateTo]);\n\n        let dateAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.dateScale)\n            .ticks(ticks)\n            .tickFormat(tickFormat);\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(dateAxis);\n\n        // doing style stuff in JavaScript is considered bad practice...:\n        this.svg.select('.horizontal-axis')\n            .selectAll('text')\n                .attr('x', -10)\n                .attr('y', 0)\n                .attr('dy', '.35em')\n                .style('text-anchor', 'end');\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * This method adds an SVG g element with many SVG rects in it. Each rect\r\n     * represents the count of how many data rows fall within the area covered\r\n     * by the rect, where the horizontal boundaries dictate the date range and\r\n     * the vertical boundaries dictate the time of day range.\r\n     * @return {DateRect} A reference to the instance of DateRect.\r\n     */\r\n    protected drawSymbols():DateRect {\r\n\n        // capture the this object\n        let that:DateRect = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:0, right: 0, top: 0, bottom: 0}; // pixels\n        let wDays:number = moment(this.dateTo).diff(moment(this.dateFrom), 'days', true);\n\n        let symbolWidth :number = w / wDays - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24.0 - symbolMargin.top - symbolMargin.bottom;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.dateAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the rects\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', function(d:any){\r\n                        return that.dateScale(new Date(d.key[that.datekey]));\r\n                        })\n                    .attr('y', function(d:any){\r\n                        return that.todScale(parseInt(d.key.hourOfDay, 10));\n                    })\n                    .attr('width', symbolWidth)\n                    .attr('height', symbolHeight)\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    })\r\n                    .on('click', function(d:any){\r\n                        that.onClick(d);\r\n                    })\r\n                    .on('mouseover', function(d:any){\r\n                        that.onMouseOver(d);\r\n                    });\r\n\n        return this;\n\n    }\r\n\r\n\r\n\r\n    /*\r\n     * overrides method from Base\r\n     */\r\n    protected onMouseOver(d: any) {\r\n        console.log('x:' + this.dateScale(new Date(d.key[this.datekey])) +\r\n            ', y:' + this.todScale(d.key['hourOfDay']) +\r\n            ', count:' + d.value);\r\n    }\r\n\r\n\r\n\n}\n\n\n","\r\nimport 'd3';\r\n\r\nimport {Base} from './base';\r\nimport {DateCircle} from './date-circle';\r\nimport {DateRect} from './date-rect';\r\nimport {WeekdayCircle} from './weekday-circle';\r\nimport {WeekdayRect} from './weekday-rect';\r\n\r\n/**\r\n * Convenience type/collection of various punchcards\r\n  */\r\ntype PunchcardVisualization = Base|DateCircle|DateRect|\r\n                                    WeekdayCircle|WeekdayRect;\r\n\n/**\r\n * Legend adds a legend to an existing PunchcardVisualization, indicating which\r\n * color represents which domain value.\r\n */\r\nexport class Legend {\r\n\r\n    /**\r\n     * Margin in pixels to the left of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginLeft: number;\r\n    /**\r\n     * Margin in pixels to the right of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginRight: number;\r\n    /**\r\n     * Margin in pixels to the top of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginTop: number;\r\n    /**\r\n     * Margin in pixels to the bottom of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginBottom: number;\r\n    /**\r\n     * The Legend's sibling, i.e. the object that the legend is associated with.\r\n     * @type {PunchcardVisualization}\r\n     */\r\n    protected sibling: PunchcardVisualization;\r\n    /**\r\n     * The title of the Legend\r\n     * @type {string}\r\n     */\r\n    protected title: string;\r\n    /**\r\n     * Text to label the Legend's vertical axis\r\n     * @type {string}\r\n     */\r\n    protected ylabel: string;\r\n    /**\r\n     * The legend's horizontal axis scale\r\n     * @type {any}\r\n     */\r\n    protected horizontalScale: any;\r\n    /**\r\n     * The Legend's vertical axis scale\r\n     * @type {any}\r\n     */\r\n    protected verticalScale: any;\r\n    /**\r\n     * The Legend's width in pixels\r\n     * @type {number}\r\n     */\r\n    protected width: number;\r\n    /**\r\n     * The Legend's height in pixels\r\n     * @type {number}\r\n     */\r\n    protected height: number;\r\n\r\n    /**\r\n     * Adds a legend to an existing PunchcardVisualization.\r\n     * @param  {PunchcardVisualization} sibling The sibling element, for which\r\n     * a legend needs to be constructed\r\n     * @return {[type]} A reference to the instance of Legend\r\n     */\r\n    constructor (sibling:PunchcardVisualization) {\n\n        this.sibling = sibling;\n\n        // the margins around the legend body\n        this.marginLeft = 0;\n        this.marginRight = 60;\n        this.marginTop = this.sibling.marginTop;\n        this.marginBottom = this.sibling.marginBottom;\n\n        this.width = this.sibling.legendWidth - this.marginLeft - this.marginRight;\n        this.height = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n\n        this.title = '';\n        this.ylabel = '';\n\n    }\n\n\n\n    /**\r\n     * This method calls the other methods in a predefined succession, so that\r\n     * the whole legend gets drawn\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    public draw(): Legend {\r\n        // draw the legend\n\n        this.drawLegendBody();\n        this.drawHorizontalAxis();\n        this.drawVerticalAxis();\n        this.drawVerticalAxisLabel();\n        this.drawTitle();\n        this.drawSymbols();\n        this.drawBox();\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the box around the legend\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawBox():Legend {\r\n        // draw box\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.marginTop;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend legendbody-box')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', this.width)\n                .attr('height', this.height)\n                .attr('class', 'legend legendbody-box');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's horizontal axis\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    private drawHorizontalAxis():Legend {\r\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        let horizontalAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.horizontalScale)\n            .ticks(0);\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend horizontal-axis')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' );\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * Draws the Legend's body (but not the colored symbols on it)\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawLegendBody():Legend {\r\n        //\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom - this.height;\n\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend legendbody')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', this.width)\n                .attr('height', this.height)\n                .attr('class', 'legend legendbody');\r\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's colored symbols, each of which is associated with a\r\n     * certain domain value.\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawSymbols():Legend {\r\n        // pass\n\n        let that:Legend = this;\r\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        let data: any = [];\n        let nRects:number = 128;\n        for (let iRect = 0; iRect < nRects; iRect += 1) {\n            data.push({\n                    value: this.sibling.colormap.cLimLow +\n                            ((iRect + 0.5) / nRects) * (this.sibling.colormap.cLimHigh - this.sibling.colormap.cLimLow)\n                });\n        }\n\n        let symbolHeight: number = this.height / nRects;\n\n        // draw the rects\n        this.sibling.svg\n            .append('g')\n            .attr('class', 'punchcard-legend symbol')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', 0)\n                    .attr('y', function(d:any){\r\n                        return that.verticalScale(d.value) - 0.5 * symbolHeight;\n                    })\n                    .attr('width', this.width)\n                    .attr('height', symbolHeight)\n                    .attr('fill', function(d:any){\r\n                        return that.sibling.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's title\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawTitle():Legend {\r\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft + 0.5 * this.width;\n        let dy:number = this.marginTop - 20;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend title')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.title)\n            .attr('class', 'title');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's vertical axis, that is used to read the domain value\r\n     * associated with a certain color.\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawVerticalAxis():Legend {\r\n        //\n        let w :number = this.sibling.legendWidth - this.marginLeft - this.marginRight;\n        let h :number = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft + w;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        this.verticalScale = d3.scale.linear()\n            .range([0, -h])\n            .domain([this.sibling.colormap.cLimLow, this.sibling.colormap.cLimHigh]);\n\n        let verticalAxis = d3.svg.axis()\n            .orient('right')\n            .scale(this.verticalScale)\n            .innerTickSize(5)\n            .outerTickSize(5);\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend vertical-axis')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(verticalAxis);\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * Draws the Legend's vertical axis text label\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawVerticalAxisLabel():Legend {\r\n        //\n        let h :number = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.sibling.domElem.clientWidth - this.marginRight + 40;\n        let dy:number = this.marginTop + 0.5 * h;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend vertical-axis-label')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ') rotate(-90)')\n            .append('text')\n            .text(this.ylabel)\n            .attr('class', 'legend vertical-axis-label');\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * [marginLeft description]\r\n     * @param  {number} marginLeft [description]\r\n     * @return {[type]}            [description]\r\n     */\r\n    protected set marginLeft(marginLeft:number) {\n        this._marginLeft = Math.max(marginLeft, 0);\n    }\n\r\n    /**\r\n     * [marginLeft description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginLeft():number {\n        return this._marginLeft;\n    }\n\r\n    /**\r\n     * [marginRight description]\r\n     * @param  {number} marginRight [description]\r\n     * @return {[type]}             [description]\r\n     */\r\n    protected set marginRight(marginRight:number) {\n        this._marginRight = Math.max(marginRight, 0);\n    }\n\r\n    /**\r\n     * [marginRight description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginRight():number {\n        return this._marginRight;\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @param  {number} marginTop [description]\r\n     * @return {[type]}           [description]\r\n     */\r\n    protected set marginTop(marginTop:number) {\n        this._marginTop = Math.max(marginTop, this.sibling.marginTop);\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginTop():number {\n        return this._marginTop;\n    }\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @param  {number} marginBottom [description]\r\n     * @return {[type]}              [description]\r\n     */\r\n    protected set marginBottom(marginBottom:number) {\n        this._marginBottom = Math.max(marginBottom, this.sibling.marginBottom);\n    }\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginBottom():number {\n        return this._marginBottom;\n    }\n\r\n}\r\n\n","\r\n/**\r\n * This is the Punchcards module\r\n */\r\nexport {Base} from './base';\r\nexport {ColorMap} from './colormap';\r\nexport {DateCircle} from './date-circle';\r\nexport {DateRect} from './date-rect';\r\nexport {Legend} from './legend';\r\nexport {WeekdayCircle} from './weekday-circle';\r\nexport {WeekdayRect} from './weekday-rect';\r\n\r\n","\r\nimport 'crossfilter';\r\nimport 'd3';\r\n\r\nimport {ColorMap} from './colormap';\r\nimport {WeekdayRect} from './weekday-rect';\r\n\r\n\r\n/**\r\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\r\n */\r\nexport class WeekdayCircle extends WeekdayRect {\r\n\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\r\n\n        super(cf, domElemId, datekey);\r\n\n        this.xlabel = 'Day of week';\n        this.title = 'WeekdayCircle title';\r\n        this.colormap = new ColorMap('blues');\r\n        super.defineDimensions();\r\n        this.domElem.classList.remove('punchcard-weekday-rect');\r\n        this.domElem.classList.add('punchcard-weekday-circle');\r\n    }\n\n\n\n    /**\r\n     * This method adds an SVG g element containing many SVG circle elements,\r\n     * i.e. the 'symbols', to the DOM. Each symbol represents the count of how\r\n     * many rows from the data fall on a given day/time-of-day combination.\r\n     * @return {WeekdayCircle} Returns a reference to the instance of\r\n     * WeekdayCircle\r\n     */\r\n    protected drawSymbols():WeekdayCircle {\r\n\n        // capture the this object\n        let that:WeekdayCircle = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:2, right: 2, top: 2, bottom: 2}; // pixels\n        let symbolWidth :number = w / 7 - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24 - symbolMargin.top - symbolMargin.bottom;\n\n        let r:number = Math.min(symbolWidth, symbolHeight) / 2 - 2;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.weekdayAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the circles\r\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('circle.symbol')\n                .data(data)\n                .enter()\n                .append('circle')\n                    .attr('class', 'symbol')\n                    .attr('cx', function(d:any){\r\n                        return that.dayOfWeekScale(d.key['weekday']) + symbolMargin.left;\n                    })\n                    .attr('cy', function(d:any){\r\n                        return that.todScale(d.key['hourOfDay']) + symbolHeight / 2 + symbolMargin.top;\n                    })\n                    .attr('r', function(d:any){\r\n                        let numer:number = d.value - that.colormap.cLimLow;\r\n                        let denom:number = that.colormap.cLimHigh - that.colormap.cLimLow;\r\n                        if (denom === 0) {\r\n                            return Math.max(r, 1);\r\n                        } else {\r\n                            return Math.max(r * numer / denom, 1);\r\n                        }\r\n                    })\r\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    })\r\n                    .on('click', function(d:any){\r\n                        that.onClick(d);\r\n                    })\r\n                    .on('mouseover', function(d:any){\r\n                        that.onMouseOver(d);\r\n                    });\r\n\n        return this;\n    }\n\n\n\n}\n\n\n","\r\nimport 'crossfilter';\r\nimport 'd3';\r\nimport 'moment';\r\n\r\nimport {Base} from './base';\r\nimport {ColorMap} from './colormap';\r\n\r\n/**\r\n * See <a href=\"https://nlesc-sherlock.github.io/punchcardjs-demo/sites/demo/\">examples on GitHub</a>.\r\n */\r\nexport class WeekdayRect extends Base {\r\n\n    protected dayOfWeekScale: d3.scale.Ordinal<any, any>;\r\n    protected xFrom         : number;\r\n    protected xTo           : number;\r\n\n    /**\r\n     * Constructor method for making a punchcard visualization with the day of\r\n     * week on the horizontal axis, and hour of day on the vertical axis, using\r\n     * rectangular symbols to represent how many rows from the input data fall\r\n     * within the area covered by each rectangle.\r\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\r\n     * containing the data.\r\n     * @param  {string} domElemId Name of the DOM element in which to draw.\r\n     * @return {[type]} A reference to the instance of WeekdayRect.\r\n     */\r\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string, datekey: string) {\r\n\n        super(cf, domElemId, datekey);\r\n\n        this.marginBottom = 50;\n        this.xlabel = 'Day of week';\n        this.title = 'WeekdayRect title';\r\n        this.colormap = new ColorMap('summer');\r\n        this.defineDimensions();\r\n        this.domElem.classList.add('punchcard-weekday-rect');\r\n\n    }\n\n\n\n\n    /**\r\n     * define the crossfilter dimensions as used by this class\r\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect\r\n     */\r\n    protected defineDimensions():WeekdayRect {\r\n\r\n        // store a reference to the instance\r\n        let that:WeekdayRect = this;\r\n\r\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n\n        this.dim.weekdayAndHourOfDay = this.cf.dimension(function (d:any) {\r\n            //stringify() and later, parse() to get keyed objects\n            let m:moment.Moment;\r\n            if (d.hasOwnProperty(that.datekey)) {\r\n                m = moment(d[that.datekey]);\r\n                let obj:any = {};\r\n                obj['weekday'] = m.format('ddd');\r\n                obj['hourOfDay'] = m.hour();\r\n                return JSON.stringify(obj);\r\n            } else {\r\n                throw new Error('datekey undefined');\r\n            }\r\n        });\r\n        this.canDraw = true;\r\n\n        return this;\n    }\n\n\n\n\n    /**\r\n     * This method defines which other methods to call in order to create\r\n     * a punchcard graph with the day of week on the horizontal axis and the\r\n     * time of day on the vertical axis. Mostly calls methods of the parent\r\n     * class, Base, but for example the symbols for this class are SVG rects,\r\n     * so it calls its own method .drawSymbols() for that.\r\n     *\r\n     * Successful drawing depends on whether the container is currently visible,\r\n     * and whether there is enough information in the instance to draw anything\r\n     * at all.\r\n     *\r\n     * This method overrides stub method in parent class.\r\n     *\r\n     * @return {WeekdayRect} A reference to an instance of WeekdayRect.\r\n     */\r\n    public draw():WeekdayRect {\r\n\n        if (this.domElem.classList.contains('hidden')) {\n            // div is hidden\n            return this;\n        } else {\r\n            // div is visible\r\n            if (this.canDraw) {\r\n                // dimensions have been defined\r\n                super.drawSvg();\r\n                super.drawChartBody();\r\n                this.drawHorizontalAxis();\r\n                super.drawHorizontalAxisLabel();\r\n                super.drawVerticalAxis();\r\n                super.drawVerticalAxisLabel();\r\n                super.drawTitle();\r\n                this.drawSymbols();\r\n                super.drawBox();\r\n                super.drawLegend();\r\n            }\r\n\n            return this;\n        }\n    }\n\n\n\n\n    /**\r\n     * Adds an SVG g element containing a d3.scale.ordinal for plotting\r\n     * the day of the week on the horizontal axis of the punchcard graph.\r\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect.\r\n     */\r\n    private drawHorizontalAxis():WeekdayRect {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let dx:number = this.marginLeft;\n        let dy:number = this.domElem.clientHeight - this.marginBottom;\n\n        let range:Array<number> = [];\n        let ndays:number = 7.0;\n        for (let r of [0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.0]) {\n            range.push(w * r / ndays);\n        }\n\n        this.dayOfWeekScale = d3.scale.ordinal()\n            .range(range)\n            .domain(['', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', '']);\n\n        let xAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.dayOfWeekScale)\n            .tickValues(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\n            .innerTickSize(5)\n            .outerTickSize(0);\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(xAxis);\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * This method adds an SVG g element with many SVG rects in it. Each rect\r\n     * represents the count of how many data rows fall within the area covered\r\n     * by the rect, where the horizontal boundaries dictate the day-of-week and\r\n     * the vertical boundaries dictate the time of day range.\r\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect.\r\n     */\r\n    protected drawSymbols():WeekdayRect {\r\n\n        // capture the this object\n        let that:WeekdayRect = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:0, right: 0, top: 0, bottom: 0}; // pixels\n        let symbolWidth :number = w / 7 - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24 - symbolMargin.top - symbolMargin.bottom;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.weekdayAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the rects\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', function(d:any){\r\n                        return that.dayOfWeekScale(d.key['weekday']) - symbolWidth / 2;\n                    })\n                    .attr('y', function(d:any){\r\n                        return that.todScale(d.key['hourOfDay']);\n                    })\n                    .attr('width', symbolWidth)\n                    .attr('height', symbolHeight)\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    })\r\n                    .on('click', function(d:any){\r\n                        that.onClick(d);\r\n                    })\r\n                    .on('mouseover', function(d:any){\r\n                        that.onMouseOver(d);\r\n                    });\r\n\r\n        return this;\n    }\r\n\r\n    /*\r\n     * overrides method from Base\r\n     */\r\n    protected onMouseOver(d: any) {\r\n        console.log('x:' + this.dayOfWeekScale(d.key['weekday']) +\r\n            ', y:' + this.todScale(d.key['hourOfDay']) +\r\n            ', count:' + d.value);\r\n    }\r\n\r\n}\n\n\n"]}